https://www.youtube.com/watch?v=V01jjyq7MS8

Hypermedia As The Engine Of Application State
HATEOAS
It is a representational model of REST
Here we exposed hypermedia links in the rest endpoints itself

hateoas dependency

Users 
	name,
	salary,
	userId
UsersController 
	/users
	getAllUsers()

	/user/{userId}
	getUser()

implement hateoas

UsersController
	@GetMapping(value="/getAllUsersUsingHateoas", produces = MediaTypes.HAL_JSON)
	getAllUsersUsingHateoas()
		Link link1 = ControllerLinkBuilder
			.linkTo(UsersController.class)
			.slash(user1.getName())
			.withSelfRel();
		user1.add(link1);
		
	adding multiple links: 
	
	@GetMapping(value="/getAllUsersUsingHateoas", produces = MediaTypes.HAL_JSON)
	getAllUsersUsingHateoas()
		//create user1, user2 objects
		Link link1 = ControllerLinkBuilder
			.linkTo(UsersController.class)
			.slash(user1.getName())
			.selfSelfRel();
		Link link2 = ControllerLinkBuilder
			.linkTo(UsersController.class)
			.slash(user1.getSalary())
			.withRel("salary");
		user1.add(link1, link2);
		
		Link link3 = ControllerLinkBuilder
			.linkTo(UsersController.class)
			.slash(user2.getSalary())
			.withRel("salary");
		user2.add(link3);
		
		
Users extends ResourceSupport

reference: 
https://howtodoinjava.com/spring-boot/rest-with-spring-hateoas-example/

----------------------------------
https://www.youtube.com/watch?v=8S8o46avgAw


springboot junit test

1st approach (using @Mock, @InjectMocks)
	@InjectMocks SomeBusinessImpl businessImpl; - Inject the mocks as dependencies into businessImpl
	@Mock DataService dataServiceMock; - Create a mock for DataService
	@RunWith(MockitoJUnitRunner.class) - The JUnit Runner which causes all the initialization magic with @Mock and @InjectMocks to happen before the tests are run.
 

	@RunWith(MockitoJUnitRunner.class)
	public class BusinessServicesMockTest {

		@Mock
		DataService dataServiceMock;

		@InjectMocks
		BusinessService businessImpl;

		@Test
		public void testFindTheGreatestFromAllData() {
			when(dataServiceMock.retrieveAllData()).thenReturn(new int[] { 24, 15, 3 });
			assertEquals(24, businessImpl.findTheGreatestFromAllData());
		}
	}

2nd approach (@MockBean, autowired bean available in spring context) 
	@RunWith(SpringRunner.class) - Spring Runner is used to launch up a spring context in unit tests.
	@SpringBootTest - This annotation indicates that the context under test is a @SpringBootApplication. The complete SpringBootTutorialBasicsApplication is launched up during the unit test.
	@MockBean DataService dataServiceMock - @MockBean annotation creates a mock for DataService. This mock is used in the Spring Context instead of the real DataService.
	@Autowired BusinessService businessImpl - Pick the Business Service from the Spring Context and autowire it in.

	@RunWith(SpringRunner.class)
	@SpringBootTest
	public class BusinessServicesMockSpringContextTest {

		@MockBean
		DataService dataServiceMock;

		@Autowired
		BusinessService businessImpl;

		@Test
		public void testFindTheGreatestFromAllData() {
			when(dataServiceMock.retrieveAllData()).thenReturn(new int[] { 24, 15, 3 });
			assertEquals(24, businessImpl.findTheGreatestFromAllData());
		}
	}

	which approach should be preferred?
	Launching the entire spring context makes the unit test slower. Unit tests will also start failing if there are errors in other beans in the contexts. So, the MockitoJUnitRunner approach is preferred.

	Reference: 
	http://www.springboottutorial.com/spring-boot-unit-testing-and-mocking-with-mockito-and-junit

3rd approach
To test controller
--------------------

package com.techprimers.test.testcontrollerexample;


import org.hamcrest.Matchers;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@RunWith(SpringJUnit4ClassRunner.class)
public class HelloResourceTest {


    private MockMvc mockMvc;

    @Mock
    private HelloService helloService;

    @InjectMocks
    private HelloResource helloResource;

    @Before
    public void setUp() throws Exception {
        mockMvc = MockMvcBuilders.standaloneSetup(helloResource)
                .build();
    }

    @Test
    public void testHelloWorld() throws Exception {

        when(helloService.hello()).thenReturn("hello");

        mockMvc.perform(get("/hello"))
                .andExpect(status().isOk())
                .andExpect(content().string("hello"));

        verify(helloService).hello();
    }

    @Test
    public void testHelloWorldJson() throws Exception {
        mockMvc.perform(get("/hello/json")
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.title", Matchers.is("Greetings")))
                .andExpect(jsonPath("$.value", Matchers.is("Hello World")))
                .andExpect(jsonPath("$.*", Matchers.hasSize(2)));
    }

    @Test
    public void testPost() throws Exception {
        String json = "{\n" +
                "  \"title\": \"Greetings\",\n" +
                "  \"value\": \"Hello World\"\n" +
                "}";
        mockMvc.perform(post("/hello/post")
                .contentType(MediaType.APPLICATION_JSON)
                .content(json))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.title", Matchers.is("Greetings")))
                .andExpect(jsonPath("$.value", Matchers.is("Hello World")))
                .andExpect(jsonPath("$.*", Matchers.hasSize(2)));
    }
}


https://github.com/TechPrimers/test-controller-example/tree/master/src/test/java/com/techprimers/test/testcontrollerexample
https://www.youtube.com/watch?v=8S8o46avgAw	
https://www.youtube.com/watch?v=Ijj5RLSAcYw
===================

Table of content

- [Fixed locale (locale changed only once ata the time of application startup)](#fixed-locale-locale-changed-only-once-ata-the-time-of-application-startup)
  - [In main class](#in-main-class)
  - [In controller class](#in-controller-class)
  - [property files](#property-files)
- [Based on Accept-language header](#based-on-accept-language-header)
  - [Configuration for locale based on Accept-Language header](#configuration-for-locale-based-on-accept-language-header)
  - [In controller class](#in-controller-class-1)
  - [property files (with _language or _language_country)](#property-files-with-language-or-languagecountry)
- [Based on request parameter ( \<url>?language1=fr )](#based-on-request-parameter--urllanguage1fr)
  - [In controller](#in-controller)
  - [In message.properties](#in-messageproperties)
  - [In configuration class](#in-configuration-class)


# Fixed locale (locale changed only once ata the time of application startup)
First, create springboot project

## In main class
```
Locale.setDefault(Locale.CHINA);
```
## In controller class
```
message.getMessage("a.b.c", null, LocaleContextHolder.getLocale())
```
## property files
```
messages.properties
    a.b.c= hello world
messages_en_US.properties
    a.b.c= us hello world
messages_zh_cn.properties
    a.b.c= china hello world
```

# Based on Accept-language header

## Configuration for locale based on Accept-Language header
```java
package com.pv.inter.internalization;

import java.util.Arrays;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ResourceBundleMessageSource;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver;

@Configuration
public class CustomLocaleResolver extends AcceptHeaderLocaleResolver implements WebMvcConfigurer {

List<Locale> LOCALES = Arrays.asList(
    new Locale("en"),
    new Locale("zh"),
    new Locale("fr"));

    @Override
    public Locale resolveLocale(HttpServletRequest request) {
        String headerLang = request.getHeader("Accept-Language");
        System.out.println(headerLang);
        return headerLang == null || headerLang.isEmpty()
        ? Locale.getDefault()
        : Locale.lookup(Locale.LanguageRange.parse(headerLang), LOCALES);
    }

    // This bean is not required. Use MessageSource to autowired in class
    @Bean
    public ResourceBundleMessageSource messageSource() {
        ResourceBundleMessageSource rs = new ResourceBundleMessageSource();
        rs.setBasename("messages");
        rs.setDefaultEncoding("UTF-8");
        rs.setUseCodeAsDefaultMessage(true);
        return rs;
    }
}
```

## In controller class
```java
@Autowired
private MessageSource messageSource;
//	private ResourceBundleMessageSource  messageSource;

messageSource.getMessage("a.b.c", null, LocaleContextHolder.getLocale());
```

## property files (with _language or _language_country)
```
messages_en.properties
messages_fr.properties
messages_zh_HK.properties
messages_zh_TW.properties
```
> **Note**:  
change properties of file to UTF-8

# Based on request parameter ( \<url>?language1=fr )

## In controller
```java
@Autowired
private MessageSource messageSource;

String message = messageSource.getMessage("hello.world",new Object[] {"one","two"}, LocaleContextHolder.getLocale());
//hello.world= hello world {0} {1} ca

```

## In message.properties
in src\main\resources
```
messages_en_CA.properties
hello.world= hello world {0} {1} ca
messages_fr_FR.properties
hello.world= hello world {0} {1} fr
messages.properties
hello.world= hello world {0} {1} en
```

## In configuration class
```java
@Configuration
class Config  implements WebMvcConfigurer{
    @Bean
    public LocaleResolver localeResolver() {
        SessionLocaleResolver localeResolver = new SessionLocaleResolver();
        localeResolver.setDefaultLocale(Locale.CANADA); 
        //default locale
        return localeResolver;
    }

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        LocaleChangeInterceptor localeChangeInterceptor = new LocaleChangeInterceptor();
        localeChangeInterceptor.setParamName("language1"); 
        // passing it as a queryString
        registry.addInterceptor(localeChangeInterceptor);
    }
}
```
